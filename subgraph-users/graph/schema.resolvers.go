package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"
	"subgraph-users/graph/model"

	"github.com/clerk/clerk-sdk-go/v2/user"
)

// Author is the resolver for the author field.
func (r *postResolver) Author(ctx context.Context, obj *model.Post, federationRequires map[string]any) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Author - author"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	userList, err := user.List(ctx, &user.ListParams{})
	if err != nil {
		return nil, err
	}

	gqlUsers := make([]*model.User, len(userList.Users))
	for i, u := range userList.Users {
		gqlUsers[i] = &model.User{
			ID:   fmt.Sprintf(u.ID),
			Name: u.Username,
		}
	}

	return gqlUsers, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Post returns PostResolver implementation.
func (r *Resolver) Post() PostResolver { return &postResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type postResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
