package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"
	"subgraph-posts/graph/model"
	"subgraph-posts/graph/models"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.NewPost) (*model.Post, error) {
	post := models.Post{
		Content:  &input.Content,
		AuthorID: input.AuthorID, // convert GraphQL ID -> uint
	}

	if err := r.DB.Create(&post).Error; err != nil {
		return nil, err
	}

	return &model.Post{
		ID:       fmt.Sprint(post.ID),
		Content:  post.Content,
		AuthorID: post.AuthorID,
	}, nil
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context) ([]*model.Post, error) {
	var posts []models.Post
	if err := r.DB.Find(&posts).Error; err != nil {
		return nil, err
	}

	gqlPosts := make([]*model.Post, len(posts))
	for i, p := range posts {
		gqlPosts[i] = &model.Post{
			ID:       fmt.Sprint(p.ID),
			Content:  p.Content,
			AuthorID: p.AuthorID,
		}
	}
	return gqlPosts, nil
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id string) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: Post - post"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
